/* niui – Grid */
@import "../../css/niui-setup";

/* For proper fallback, use .col* for all columns. Automatic column width (no .col*) works for Flexbox only. */
.n-row {
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  text-align: center;

  // 	> div > img, > div > div > img, > div > picture, > div > div > picture, > div > picture > img, > div > div > picture > img {
  img,
  picture {
    max-width: 100%; // Prevent images overflowing
    height: auto;
    border: none;
    text-align: center;
  }

  video {
    height: auto;
    background: #000;
    margin: 0 auto;
    display: block;
    max-width: 100%;

    a[href] {
      color: #fff;
    }
  }

  table:not(.n-table) td {
    // Non-niui tables overflow fix
    word-break: break-word;
  }

  > * {
    position: relative;
    word-wrap: break-word;
    width: calc(20% - var(--nui-line-height-em));
    --col-width: 1/5; // Minimum auto column width is 20%
    padding: calc(var(--nui-line-height-em) / 4);
    margin: calc(var(--nui-line-height-em) / 4);
    flex-grow: 1;
    text-align: start;
    min-width: 0; // FF flex-basis bug fix for when a column child is wider than the column
  }

  > [class^="_"],
  > [class*=" _"] {
    // If it has a col* class
    flex-grow: 0;
  }

  > *,
  > * > * {
    max-width: 100%;
    /* instead of overflow-x:hidden, which would also activate overflow-y:hidden and clip the tooltip */
  }

  > * > img {
    display: block;
    margin: 0 auto;
  }

  > ._2\/3 {
    --col-width: 2/3; // or with inline style without the need for column classes
  }

  > ._3\/4 {
    --col-width: 3/4;
  }

  > ._1\/4 {
    --col-width: 1/4;
  }

  > ._1\/5 {
    --col-width: 1/5;
  }

  > ._1\/6 {
    --col-width: 1/6;
  }

  > ._2\/5 {
    --col-width: 2/5;
  }

  > ._3\/5 {
    --col-width: 3/5;
  }

  > ._4\/5 {
    --col-width: 4/5;
  }

  > ._1\/3 {
    --col-width: 1/3;
  }

  > ._1\/2 {
    --col-width: 1/2;
  }

  > ._1\/1,
  > *:only-child:not([class^="_"]) {
    // ._1/1 or a single classless item
    --col-width: 1;
  }
}

@-moz-document url-prefix() {
  .n-row > * {
    margin: calc(var(--nui-line-height-em) / 4 - 0.0009em); // FF odd font-size grid fix
  }
}

/* colXY where the column takes up X/Y of space; colY means 1/Y */
// CSS Variables grid with only 1 line per column variant. To do: fallback.
@supports (--a: 1) {

  // Overwrite the fallback flex-basis with CSS variable
  .n-row > *,
  .n-row > [class^="_"] {
    --spacing: var(--nui-line-height-em);
    flex-basis: calc(var(--col-width) * 100% - var(--spacing));
  }

  @media screen and (max-width: 1024px) {
    .n-row > * {
      --col-width: 1/5;
    }
  }

  @media not screen and (min-width: $screen-limited) {
    .n-row > * {
      --col-width: 1/3;
    }
  }

  .n-row.n-row--no-padding,
  .n-row.n-row--no-padding > * {
    --spacing: calc(var(--nui-line-height-em) / 2);
    padding: 0;
  }

  .n-row.n-row--no-margin,
  .n-row.n-row--no-margin > *,
  .n-row.n-row--vertical > * {
    --spacing: calc(var(--nui-line-height-em) / 2);
    margin: 0;
  }

  .n-row.n-row--no-spacing > * {
    --spacing: 0em;
    padding: 0;
    margin: 0;
  }

  .n-row.n-row--spacing-horizontal > * {
    margin: 0 calc(var(--nui-line-height-em) / 2);
  }

  .n-row.n-row--spacing-vertical > * {
    margin: calc(var(--nui-line-height-em) / 2) 0;
  }
}

.n-left,
.n-left > *,
.n-row > .n-left {
  text-align: start;
}

.n-right,
.n-right > *,
.n-row > .n-right {
  text-align: end;
}

.n-center,
.n-center > *,
.n-row > .n-center {
  text-align: center;
}

.n-row > .n-top,
.n-row > .n-middle,
.n-row > .n-bottom {
  display: flex;
}

.n-row > .n-top,
.n-top.n-row > * {
  vertical-align: top;
  justify-content: flex-start;
  flex-direction: column;
  display: flex;
}

.n-row > .n-middle,
.n-middle.n-row > * {
  vertical-align: middle;
  justify-content: center;
  flex-direction: column;
  display: flex;
}

.n-row > .n-bottom,
.n-bottom.n-row > * {
  vertical-align: bottom;
  justify-content: flex-end;
  flex-direction: column;
  display: flex;
}

.n-align-children *,
.n-row.n-align-children > * {
  text-align: inherit;
}

.n-row.n-row--vertical {
  flex-direction: column;
  min-height: 100%;

  > *,
  > [class^="_"],
  > [class*=" _"] {
    width: 100%;
    box-sizing: border-box;
  }
}

.n-section {
  position: relative;

  &:before,
  &:after {
    // Prevent inner edge margins from creating blank space between sections
    content: "";
    display: table;
    width: 100%;
  }
}

/* Masonry in CSS only */
.n-masonry {
  column-count: 3;
  column-gap: 0;
  margin: var(--nui-line-height-em) 0;
  margin-inline-end: calc(calc(var(--nui-line-height-em)/ -2));
  max-width: none;

  > * {
    display: table; // Unwanted wrapping in Chrome – 2 instead of 3 columns
    width: 100%;
    -webkit-column-break-inside: avoid;
    page-break-inside: avoid;
    /* FF 20+ */
    break-inside: avoid-column;
    margin: 0;
    padding: calc(var(--nui-line-height-em) / 2) 0;
    padding-inline-end: calc(var(--nui-line-height-em)/ 2);
    box-sizing: border-box;
    word-break: break-word; // Overflow protection for long words
    word-wrap: break-word;
  }

  &._1\/2 {
    column-count: 2;
  }

  &._1\/4 {
    column-count: 4;
  }

  &._1\/4 {
    column-count: 5;
  }
}

ul.n-masonry {
  min-height: 0;
  padding: 0;
}

ol.n-masonry > * {
  padding-inline-start: 2.5em;
}

.n-pad {
  padding: calc(var(--nui-line-height-em) / 2);
  box-sizing: border-box;
}

.n-pad-half {
  padding: calc(var(--nui-line-height-em) / 4);
  box-sizing: border-box;
}

.n-unpad,
.n-row > * > .n-unpad {
  margin: calc(var(--nui-line-height-em) / -2);
  width: calc(var(--nui-line-height-em) + 100%);
  max-width: 100%;
  overflow-x: hidden;
}

.n-row > * > .n-unpad {
  max-width: none;
}

.n-unpad-vertical {
  margin: calc(-1 * var(--nui-line-height-em)) 0;
}

.n-row.n-row--border-all {
  box-shadow: inset 0 0 0 1px var(--nui-color, black);

  > * {
    box-shadow: inset 1px 1px 0 0 var(--nui-color, black);
    margin: 0;
    flex-basis: calc(var(--col-width) * 100% - var(--spacing) / 2);
  }
}

.n-row.n-row--border {
  box-shadow: inset 0 0 0 1px var(--nui-color, black);
}

.n-row * .n-box {
  /* Boxes inside grid cells */
  background: #fff;
  box-shadow: inset 0 0 0 1px #e6e6e6;
}

.n-row.n-row--border-off,
.n-row.n-row--border-off * {
  box-shadow: none;
}

@media not screen and (min-width: $screen-narrow) {
  .n-row {
    box-sizing: border-box;
  }

  .n-row:not(.n-row--half) {
    // To do: revert to flex in order to use the order property on mobile
    display: block;
    //		overflow-x: hidden; // Breaks tooltip
    max-width: 100%;

    > * > .n-unpad {
      margin: -0.6em 0 -0.6em -0.3em;
      width: calc(100% + 0.6em);
      max-width: none;
    }
  }

  .n-row > *,
  .n-row > [class^="_"] {
    padding: 0;
    width: 100%; // Important because of Android Browser
    border: none;
    box-sizing: border-box;
  }

  .n-row:not(.n-row--no-margin):not(.n-row--border-all):not(.n-tabs) > *,
  .n-row:not(.n-row--no-margin):not(.n-row--border-all) > [class^="_"] {
    margin: calc(var(--nui-line-height-em) / 6) 0;
    // display: block; // disables vertical alignment
  }

  @supports (--a: 1) {

    .n-row > *,
    .n-row > [class^="_"] {
      padding: 0.3em;
      flex: 0 0 100%;
    }
  }

  .n-row > *:empty {
    display: none;
  }

  .n-row > .n-full-mobile-width,
  .n-row > [class^="_"].n-full-mobile-width {
    box-sizing: content-box;
    padding: 0;
  }

  .n-row.n-row--no-spacing > *,
  .n-row.n-row--no-spacing > [class^="_"] {
    margin: 0;
    padding: 0;
  }

  .n-row--no-mobile-gutter.n-row > * {
    padding: 0;
  }

  .n-row > *,
  .n-row.n-row--border,
  .n-row.n-row--border > * {
    border: none;
  }

  .n-row.n-row--half > * {
    width: 50%;
    flex: 0 0 50%;
  }

  .n-row.n-row--border-all .n-row {
    width: calc(100% + var(--nui-line-height-em));
  }

  /*
	.n-row.n-row--border-all > *, .n-row.n-row--border-all .n-row {
	
		margin: 0;
		padding: 0;
		width: 100%;
		overflow: hidden;
	
	}
*/
  .n-masonry {

    &,
    &[class^="_"] {
      -moz-column-count: 2;
      -webkit-column-count: 2;
      column-count: 2;
    }
  }
}