/* niui – Grid */

@import "../../css/niui-setup";

/* For proper fallback, use .col* for all columns. Automatic column width (no .col*) works for Flexbox only. */

.n-row {
	width: 100%;
	display: -ms-flexbox;
	display: flex;
	-webkit-flex-wrap: wrap;
	-ms-flex-wrap: wrap;
	flex-wrap: wrap;
	text-align: center;

	// 	> div > img, > div > div > img, > div > picture, > div > div > picture, > div > picture > img, > div > div > picture > img {
	img,
	picture {
		max-width: 100%; // Prevent images overflowing
		height: auto;
		border: none;
		text-align: center;
	}

	video {
		height: auto;
		background: #000;
		margin: 0 auto;
		display: block;
		max-width: 100%;

		a[href] {
			color: #fff;
		}
	}

	table:not(.n-table) td {
		// Non-niui tables overflow fix

		word-break: break-word;
	}
}

.n-row > * {
	position: relative;
	word-wrap: break-word;
	width: calc(20% - #{$line-height-em});
	--col-width: 1/5; // Minimum auto column width is 20%
	padding: calc(#{$line-height-em/4});
	margin: calc(#{$line-height-em/4});
	flex-grow: 1;
	text-align: left;
	text-align: start;
	box-sizing: content-box; // IE11 padding. To do: only for IE11-
	min-width: 0; // FF flex-basis bug fix for when a column child is wider than the column
}

@-moz-document url-prefix() {
	.n-row > * {
		margin: calc(#{$line-height-em/4} - 0.0009em); // FF odd font-size grid fix
	}
}

.n-row > [class^="_"],
.n-row > [class*=" _"] {
	// If it has a col* class

	flex-grow: 0;
}

.n-row:before,
.n-row:after {
	// Clear margins before/after a row

	content: "";
	display: table;
	width: 100%;
}

.n-row > *,
.n-row > * > * {
	max-width: 100%; /* instead of overflow-x:hidden, which would also activate overflow-y:hidden and clip the tooltip */
}

.n-row > * > img {
	display: block;
	margin: 0 auto;
}

/* colXY where the column takes up X/Y of space; colY means 1/Y */

// CSS Variables grid with only 1 line per column variant. To do: fallback.

.n-row > ._2\/3 {
	--col-width: 2/3; // or with inline style without the need for column classes
	flex-basis: calc(66.667% - #{$line-height-em}); // Fallback for browsers not supporting CSS variables
}

.n-row > ._3\/4 {
	--col-width: 3/4;
	flex-basis: calc(75% - #{$line-height-em});
}

.n-row > ._1\/4 {
	--col-width: 1/4;
	flex-basis: calc(25% - #{$line-height-em});
}

.n-row > ._1\/5 {
	--col-width: 1/5;
	flex-basis: calc(20% - #{$line-height-em});
}

.n-row > ._1\/6 {
	--col-width: 1/6;
	flex-basis: calc(16.667% - #{$line-height-em});
}

.n-row > ._2\/5 {
	--col-width: 2/5;
	flex-basis: calc(40% - #{$line-height-em});
}

.n-row > ._3\/5 {
	--col-width: 3/5;
	flex-basis: calc(60% - #{$line-height-em});
}

.n-row > ._4\/5 {
	--col-width: 4/5;
	flex-basis: calc(80% - #{$line-height-em});
}

.n-row > ._1\/3 {
	--col-width: 1/3;
	flex-basis: calc(33.333% - #{$line-height-em});
}

.n-row > ._1\/2 {
	--col-width: 1/2;
	flex-basis: calc(50% - #{$line-height-em});
}

.n-row > ._1\/1,
.n-row > *:only-child:not([class^="_"]) {
	// ._1/1 or a single classless item

	--col-width: 1;
	flex-basis: calc(100% - #{$line-height-em});
}

@supports (--a: 1) {
	// Overwrite the fallback flex-basis with CSS variable
	.n-row > *,
	.n-row > [class^="_"] {
		--spacing: #{$line-height-em};
		flex-basis: calc(var(--col-width) * 100% - var(--spacing));
	}

	@media screen and (max-width: 1024px) {
		.n-row > * {
			--col-width: 1/5;
		}
	}

	@media screen and (max-width: $screen-limited-max) {
		.n-row > * {
			--col-width: 1/3;
		}
	}

	.n-row.n-row__no-padding,
	.n-row.n-row__no-padding > * {
		--spacing: #{$line-height-em/2};
		padding: 0;
	}

	.n-row.n-row__no-margin,
	.n-row.n-row__no-margin > *,
	.n-row.n-row__vertical > * {
		--spacing: #{$line-height-em/2};
		margin: 0;
	}

	.n-row.n-row__no-spacing > * {
		--spacing: 0em;
		padding: 0;
		margin: 0;
	}

	.n-row.n-row__spacing-horizontal > * {
		margin: 0 $line-height-em/2;
	}

	.n-row.n-row__spacing-vertical > * {
		margin: $line-height-em/2 0;
	}
}

.n-left,
.n-left > *,
.n-row > .n-left {
	text-align: left;
	text-align: start;
}

.n-right,
.n-right > *,
.n-row > .n-right {
	text-align: right;
	text-align: end;
}

.n-center,
.n-center > *,
.n-row > .n-center {
	text-align: center;
}

.n-row > .n-top,
.n-row > .n-middle,
.n-row > .n-bottom {
	display: inline-block;
	display: flex;
}

.n-row > .n-top,
.n-top.n-row > * {
	vertical-align: top;
	justify-content: flex-start;
	flex-direction: column;
	display: flex;
}

.n-row > .n-middle,
.n-middle.n-row > * {
	vertical-align: middle;
	justify-content: center;
	flex-direction: column;
	display: flex;
}

.n-row > .n-bottom,
.n-bottom.n-row > * {
	vertical-align: bottom;
	justify-content: flex-end;
	flex-direction: column;
	display: flex;
}

.n-align-children *,
.n-row.n-align-children > * {
	text-align: inherit;
}

.n-row.n-row__vertical {
	flex-direction: column;
	min-height: 100%;

	> *,
	> [class^="_"],
	> [class*=" _"] {
		width: 100%;
		box-sizing: border-box;
	}
}

.n-section {
	position: relative;

	&:before,
	&:after {
		// Prevent inner edge margins from creating blank space between sections

		content: "";
		display: table;
		width: 100%;
	}
}

/* Masonry in CSS only */

.n-masonry {
	-moz-column-count: 3;
	-moz-column-gap: 0;
	-webkit-column-count: 3;
	-webkit-column-gap: 0;
	column-count: 3;
	column-gap: 0;
	margin: $line-height-em 0;

	> * {
		display: table; // Unwanted wrapping in Chrome – 2 instead of 3 columns
		width: 100%;
		-webkit-column-break-inside: avoid;
		page-break-inside: avoid; /* FF 20+ */
		break-inside: avoid-column;
		margin: 0;
		padding: $line-height-em/2;
		box-sizing: border-box;
		word-break: break-word; // Overflow protection for long words
		word-wrap: break-word;
	}

	&._1\/2 {
		-moz-column-count: 2;
		-webkit-column-count: 2;
		column-count: 2;
	}

	&._1\/4 {
		-moz-column-count: 4;
		-webkit-column-count: 4;
		column-count: 4;
	}

	&._1\/4 {
		-moz-column-count: 5;
		-webkit-column-count: 5;
		column-count: 5;
	}
}

ul.n-masonry {
	min-height: 0;
	padding: 0;
}

ol.n-masonry > * {
	padding-left: 2.5em;
}

.n-pad {
	padding: $line-height-em/2;
	box-sizing: border-box;
}

.n-pad-half {
	padding: $line-height-em/4;
	box-sizing: border-box;
}

.n-unpad,
.n-row > * > .n-unpad {
	margin: #{-$line-height-em/2};
	width: calc(100% + #{$line-height-em});
	max-width: 100%;
	overflow-x: hidden;
}

.n-row > * > .n-unpad {
	max-width: none;
}

.n-unpad-vertical {
	margin: -$line-height-em 0;
}

.n-row.n-row__border-all {
	--color: #000;
	box-shadow: inset 0 0 0 1px var(--color);

	> * {
		box-shadow: inset 1px 1px 0 0 var(--color);
		margin: 0;
		flex-basis: calc(var(--col-width) * 100% - var(--spacing) / 2);
	}
}

.n-row.n-row__border {
	--color: #000;
	box-shadow: inset 0 0 0 1px var(--color);
}

.n-row * .n-box {
	/* Boxes inside grid cells */

	background: #fff;
	box-shadow: inset 0 0 0 1px #e6e6e6;
}

.n-row.n-row__border-off,
.n-row.n-row__border-off * {
	box-shadow: none;
}

@media screen and (max-width: $screen-narrow-max) {
	.n-row {
		box-sizing: border-box;
	}

	.n-row:not(.n-row__half) {
		// To do: revert to flex in order to use the order property on mobile

		display: block;
		//		overflow-x: hidden; // Breaks tooltip
		max-width: 100%;

		> * > .n-unpad {
			margin: -0.6em 0 -0.6em -0.3em;
			width: calc(100% + 0.6em);
			max-width: none;
		}
	}

	.n-row > *,
	.n-row > [class^="_"] {
		padding: 0;
		width: 100%; // Important because of Android Browser
		border: none;
		box-sizing: border-box;
	}

	.n-row:not(.n-row__no-margin):not(.n-row__border-all):not(.n-tabs):not(.grid-inline-popup) > *,
	.n-row:not(.n-row__no-margin):not(.n-row__border-all) > [class^="_"] {
		margin: $line-height-em/6 0;
		display: block;
	}

	@supports (--a: 1) {
		.n-row > *,
		.n-row > [class^="_"] {
			padding: 0.3em;
			flex: 0 0 100%;
		}
	}

	.n-row > *:empty {
		display: none;
	}

	.n-row > .n-full-mobile-width,
	.n-row > [class^="_"].n-full-mobile-width {
		box-sizing: content-box;
		padding: 0;
	}

	.n-row.n-row__no-spacing > *,
	.n-row.n-row__no-spacing > [class^="_"] {
		margin: 0;
		padding: 0;
	}

	.n-row__no-mobile-gutter.n-row > * {
		padding: 0;
	}

	.n-row > *,
	.n-row.n-row__border,
	.n-row.n-row__border > * {
		border: none;
	}

	.n-row.n-row__half > * {
		width: 50%;
		flex: 0 0 50%;
	}

	.n-row.n-row__border-all .n-row {
		width: calc(100% + #{$line-height-em});
	}

	/*
	.n-row.n-row__border-all > *, .n-row.n-row__border-all .n-row {
	
		margin: 0;
		padding: 0;
		width: 100%;
		overflow: hidden;
	
	}
*/

	.n-masonry {
		&,
		&[class^="_"] {
			-moz-column-count: 2;
			-webkit-column-count: 2;
			column-count: 2;
		}
	}
}
